/*
 * ConfigureDialog.java
 *
 * Created on November 2, 2007, 3:31 PM
 *
 * Copyright (C) 2006, 2007 by John Melton, G0ORX/N6LYT
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * The author can be reached by email at
 *
 * john.melton@sun.com
 *
 */

package radio;

import javax.swing.DefaultListModel;
import javax.swing.SpinnerNumberModel;

/**
 *
 *  ConfigureDialog
 */
public class ConfigureDialog extends javax.swing.JDialog {
    
    /** Creates new form ConfigureDialog */
    public ConfigureDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setTitle("Java GUI for DttSP: Configure");
        state=State.getInstance();
        initComponents();
        initValues();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jackTabbedPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        soundCard = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sampleRate = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        bufferSize = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        waterfallLowThreshold = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        waterfallHighThreshold = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        spectrumLow = new javax.swing.JComboBox();
        spectrumHigh = new javax.swing.JComboBox();
        jLabel37 = new javax.swing.JLabel();
        spectrumFrequency = new javax.swing.JSpinner();
        jLabel38 = new javax.swing.JLabel();
        meterFrequency = new javax.swing.JSpinner();
        hardwarePanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        radio = new javax.swing.JComboBox();
        pa = new javax.swing.JCheckBox();
        rfe = new javax.swing.JCheckBox();
        antennaTuner = new javax.swing.JCheckBox();
        xvtr = new javax.swing.JCheckBox();
        rxOnly = new javax.swing.JCheckBox();
        usb = new javax.swing.JCheckBox();
        jLabel33 = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        sdr1000HwExec = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        sdr1000HwFifoPath = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        sdr1000HwCommandFifo = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        sdr1000HwStatusFifo = new javax.swing.JTextField();
        softrockCenterFrequency = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        usb1 = new javax.swing.JCheckBox();
        sdr1000StartProcess = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        rxIqInputLeft = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        rxIqInputRight = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        rxAudioOutputLeft = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        rxAudioOutputRight = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txMicInputLeft = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txMicInputRight = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txIqOutputLeft = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txIqOutputRight = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jackConnectExecCommand = new javax.swing.JTextField();
        jackConnectStartProcess = new javax.swing.JCheckBox();
        jackPanel = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jackExecCommand = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jackDriver = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jackDevice = new javax.swing.JTextField();
        jackRealtime = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jackOptions = new javax.swing.JList();
        jLabel21 = new javax.swing.JLabel();
        jackOption = new javax.swing.JTextField();
        addJackOption = new javax.swing.JButton();
        deleteJackOption = new javax.swing.JButton();
        editJackOption = new javax.swing.JButton();
        jackStartProcess = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        dttSPExecCommand = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        fifoPath = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        rxCommandFifo = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        rxSpectrumFifo = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        rxMeterFifo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txCommandFifo = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txSpectrumFifo = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txMeterFifo = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        rxId = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        txId = new javax.swing.JTextField();
        dttspStartProcess = new javax.swing.JCheckBox();
        updateButton = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        soundCard.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UNSUPPORTED", "OZY_JANUS", "AUDIGY_2_ZS", "MP3_PLUS", "EXTIGY", "DELTA_44", "FIREBOX", "EDIROL_FA_66" }));
        soundCard.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                soundCardItemStateChanged(evt);
            }
        });

        jLabel1.setText("Sound card:"); // NOI18N

        jLabel2.setText("Sample rate:"); // NOI18N

        sampleRate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "24000", "44100", "48000", "96000", "192000" }));

        jCheckBox1.setText("Delay 1 Sample"); // NOI18N
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        jLabel3.setText("Buffer size:"); // NOI18N

        bufferSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "32", "64", "128", "256", "512", "1024", "2048" }));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(jLabel3))
                .add(17, 17, 17)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(soundCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(83, 83, 83)
                        .add(jCheckBox1))
                    .add(sampleRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(bufferSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(soundCard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCheckBox1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(sampleRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bufferSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addContainerGap(250, Short.MAX_VALUE))
        );

        jackTabbedPanel.addTab("Audio", jPanel1);

        jLabel4.setText("Waterfall low threshold:"); // NOI18N

        waterfallLowThreshold.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-20", "-30", "-40", "-50", "-60", "-70", "-80", "-90", "-100", "-110", "-120", "-130", "-140", "-150", "-160" }));

        jLabel5.setText("Waterfall high threshold:"); // NOI18N

        waterfallHighThreshold.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-20", "-30", "-40", "-50", "-60", "-70", "-80", "-90", "-100", "-110", "-120", "-130", "-140", "-150", "-160" }));

        jLabel6.setText("Spectrum low:"); // NOI18N

        jLabel7.setText("Spectrum high:"); // NOI18N

        spectrumLow.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-20", "-30", "-40", "-50", "-60", "-70", "-80", "-90", "-100", "-110", "-120", "-130", "-140", "-150", "-160", "-170", "-180" }));

        spectrumHigh.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-20", "-30", "-40", "-50", "-60", "-70", "-80", "-90", "-100", "-110", "-120", "-130", "-140", "-150", "-160", "-170", "-180" }));

        jLabel37.setText("Spectrum Update Frequency:"); // NOI18N

        jLabel38.setText("Meter Update Frequency:"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jPanel2Layout.createSequentialGroup()
                            .add(jLabel6)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(spectrumLow, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel2Layout.createSequentialGroup()
                            .add(jLabel4)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(waterfallLowThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel2Layout.createSequentialGroup()
                            .add(jLabel5)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(waterfallHighThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jLabel7)
                                .add(jLabel37))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 37, Short.MAX_VALUE)
                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, spectrumHigh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, meterFrequency)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, spectrumFrequency, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))))
                    .add(jLabel38))
                .addContainerGap(256, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(waterfallLowThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(waterfallHighThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel6)
                    .add(spectrumLow, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(spectrumHigh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel37)
                    .add(spectrumFrequency, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel38)
                    .add(meterFrequency, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(130, Short.MAX_VALUE))
        );

        jackTabbedPanel.addTab("Display", jPanel2);

        jLabel8.setText("Radio:"); // NOI18N

        radio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SDR1000", "Softrock", "SDR5000" }));

        pa.setText("100 Watt PA"); // NOI18N
        pa.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        rfe.setText("RFE"); // NOI18N
        rfe.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        antennaTuner.setText("Auto Antenna Tuner"); // NOI18N
        antennaTuner.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        xvtr.setText("2 Mtr XVTR"); // NOI18N
        xvtr.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        rxOnly.setText("Receive Only"); // NOI18N
        rxOnly.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        usb.setText("USB"); // NOI18N
        usb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        jLabel33.setText("Port"); // NOI18N

        port.setText("jTextField1"); // NOI18N

        jLabel9.setText("Hardware Exec Command:"); // NOI18N

        sdr1000HwExec.setText("jTextField1"); // NOI18N

        jLabel34.setText("Hardware Fifo Path:"); // NOI18N

        sdr1000HwFifoPath.setText("jTextField1"); // NOI18N

        jLabel35.setText("Hardware Command Fifo:"); // NOI18N

        sdr1000HwCommandFifo.setText("jTextField1"); // NOI18N

        jLabel36.setText("Hardware Status Fifo:"); // NOI18N

        sdr1000HwStatusFifo.setText("jTextField1"); // NOI18N

        softrockCenterFrequency.setText("7.056000"); // NOI18N

        jLabel39.setText("Softrock Center Frequency"); // NOI18N

        usb1.setText("OZY Control"); // NOI18N
        usb1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        sdr1000StartProcess.setText("Start Process");
        sdr1000StartProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sdr1000StartProcessActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout hardwarePanelLayout = new org.jdesktop.layout.GroupLayout(hardwarePanel);
        hardwarePanel.setLayout(hardwarePanelLayout);
        hardwarePanelLayout.setHorizontalGroup(
            hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(hardwarePanelLayout.createSequentialGroup()
                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(hardwarePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel8)
                        .add(16, 16, 16)
                        .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(xvtr)
                            .add(antennaTuner)
                            .add(pa)
                            .add(hardwarePanelLayout.createSequentialGroup()
                                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(rxOnly)
                                    .add(radio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(rfe))
                                .add(47, 47, 47)
                                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(usb1)
                                    .add(hardwarePanelLayout.createSequentialGroup()
                                        .add(usb)
                                        .add(72, 72, 72)
                                        .add(jLabel33)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(port, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(hardwarePanelLayout.createSequentialGroup()
                                        .add(jLabel39)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(softrockCenterFrequency, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(hardwarePanelLayout.createSequentialGroup()
                        .add(35, 35, 35)
                        .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel34)
                            .add(jLabel9)
                            .add(jLabel35)
                            .add(jLabel36))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(sdr1000HwStatusFifo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                            .add(sdr1000HwCommandFifo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                            .add(sdr1000HwFifoPath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                            .add(sdr1000HwExec, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE))))
                .add(130, 130, 130))
            .add(hardwarePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(sdr1000StartProcess)
                .addContainerGap(470, Short.MAX_VALUE))
        );
        hardwarePanelLayout.setVerticalGroup(
            hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(hardwarePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(sdr1000StartProcess)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(radio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel39)
                    .add(softrockCenterFrequency, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rxOnly)
                    .add(usb)
                    .add(jLabel33)
                    .add(port, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rfe)
                    .add(usb1))
                .add(8, 8, 8)
                .add(pa)
                .add(9, 9, 9)
                .add(antennaTuner)
                .add(9, 9, 9)
                .add(xvtr)
                .add(20, 20, 20)
                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(sdr1000HwExec, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel34)
                    .add(sdr1000HwFifoPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11)
                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sdr1000HwCommandFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel35))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(hardwarePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel36)
                    .add(sdr1000HwStatusFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jackTabbedPanel.addTab("Hardware", hardwarePanel);

        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel16.setText("Rx IQ Input Left:"); // NOI18N
        jPanel6.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        rxIqInputLeft.setText("jTextField11"); // NOI18N
        jPanel6.add(rxIqInputLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 240, -1));

        jLabel22.setText("Rx IQ Input Right:"); // NOI18N
        jPanel6.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, 20));

        rxIqInputRight.setText("jTextField12"); // NOI18N
        jPanel6.add(rxIqInputRight, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 240, -1));

        jLabel23.setText("Rx Audio Output Left:"); // NOI18N
        jPanel6.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        rxAudioOutputLeft.setText("jTextField13"); // NOI18N
        jPanel6.add(rxAudioOutputLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 130, 240, -1));

        jLabel24.setText("Rx Audio Output Right:"); // NOI18N
        jPanel6.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, -1, -1));

        rxAudioOutputRight.setText("jTextField14"); // NOI18N
        jPanel6.add(rxAudioOutputRight, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, 240, -1));

        jLabel25.setText("Tx Mic Input Left:"); // NOI18N
        jPanel6.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));

        txMicInputLeft.setText("jTextField15"); // NOI18N
        jPanel6.add(txMicInputLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 190, 240, -1));

        jLabel26.setText("Tx  Mic Input Right:"); // NOI18N
        jPanel6.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, -1, -1));

        txMicInputRight.setText("jTextField16"); // NOI18N
        jPanel6.add(txMicInputRight, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, 240, -1));

        jLabel27.setText("Tx IQ Output Left:"); // NOI18N
        jPanel6.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, -1, -1));

        txIqOutputLeft.setText("jTextField17"); // NOI18N
        jPanel6.add(txIqOutputLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, 240, -1));

        jLabel28.setText("Tx IQ Output Right:"); // NOI18N
        jPanel6.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, -1));

        txIqOutputRight.setText("jTextField18"); // NOI18N
        jPanel6.add(txIqOutputRight, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, 240, -1));

        jLabel29.setText("Exec Command:"); // NOI18N
        jPanel6.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        jackConnectExecCommand.setText("jTextField19"); // NOI18N
        jPanel6.add(jackConnectExecCommand, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 320, -1));

        jackConnectStartProcess.setText("Start Process");
        jPanel6.add(jackConnectStartProcess, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        jackTabbedPanel.addTab("Jack Connect", jPanel6);

        jLabel18.setText("Exec Command:"); // NOI18N

        jackExecCommand.setText("jTextField7"); // NOI18N

        jLabel19.setText("Driver:"); // NOI18N

        jackDriver.setText("jTextField8"); // NOI18N

        jLabel20.setText("Device:"); // NOI18N

        jackDevice.setText("jTextField9"); // NOI18N

        jackRealtime.setText("Realtime"); // NOI18N
        jackRealtime.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        jackOptions.setModel(new DefaultListModel());
        jackOptions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jackOptionsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jackOptions);

        jLabel21.setText("Options:"); // NOI18N

        addJackOption.setText("Add"); // NOI18N
        addJackOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJackOptionActionPerformed(evt);
            }
        });

        deleteJackOption.setText("Delete"); // NOI18N
        deleteJackOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJackOptionActionPerformed(evt);
            }
        });

        editJackOption.setText("Edit"); // NOI18N
        editJackOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJackOptionActionPerformed(evt);
            }
        });

        jackStartProcess.setText("Start Process");
        jackStartProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jackStartProcessActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jackPanelLayout = new org.jdesktop.layout.GroupLayout(jackPanel);
        jackPanel.setLayout(jackPanelLayout);
        jackPanelLayout.setHorizontalGroup(
            jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jackPanelLayout.createSequentialGroup()
                        .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel19)
                            .add(jLabel20)
                            .add(jLabel18)
                            .add(jLabel21))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jackPanelLayout.createSequentialGroup()
                                .add(jackRealtime)
                                .addContainerGap())
                            .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jackPanelLayout.createSequentialGroup()
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(26, 26, 26)
                                    .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(deleteJackOption)
                                        .add(jackPanelLayout.createSequentialGroup()
                                            .add(addJackOption)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(jackOption, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(editJackOption))
                                    .add(250, 250, 250))
                                .add(jackPanelLayout.createSequentialGroup()
                                    .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jackDriver, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                                        .add(jackExecCommand, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 337, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jackDevice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .add(jackPanelLayout.createSequentialGroup()
                        .add(jackStartProcess)
                        .addContainerGap(470, Short.MAX_VALUE))))
        );
        jackPanelLayout.setVerticalGroup(
            jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jackStartProcess)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(jackExecCommand, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(jackDriver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(14, 14, 14)
                .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel20)
                    .add(jackDevice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(16, 16, 16)
                .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jackPanelLayout.createSequentialGroup()
                        .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(addJackOption)
                            .add(jackOption, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jackPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jackPanelLayout.createSequentialGroup()
                                .add(8, 8, 8)
                                .add(jLabel21))
                            .add(jackPanelLayout.createSequentialGroup()
                                .add(5, 5, 5)
                                .add(editJackOption)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(deleteJackOption))))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jackRealtime)
                .add(123, 123, 123))
        );

        jackTabbedPanel.addTab("Jack", jackPanel);

        jLabel10.setText("Exec Command:"); // NOI18N

        dttSPExecCommand.setText("jTextField1"); // NOI18N

        jLabel11.setText("Fifo Path:"); // NOI18N

        fifoPath.setText("jTextField1"); // NOI18N

        jLabel12.setText("Rx Command Fifo:"); // NOI18N

        rxCommandFifo.setText("jTextField1"); // NOI18N

        jLabel13.setText("Rx Spectrum Fifo:"); // NOI18N

        rxSpectrumFifo.setText("jTextField1"); // NOI18N

        jLabel14.setText("Rx Meter Fifo:"); // NOI18N

        rxMeterFifo.setText("jTextField2"); // NOI18N

        jLabel15.setText("Tx Command Fifo:"); // NOI18N

        txCommandFifo.setText("jTextField3"); // NOI18N

        jLabel17.setText("Tx Spectrum Fifo:"); // NOI18N

        txSpectrumFifo.setText("jTextField4"); // NOI18N

        jLabel30.setText("Tx Meter Fifo:"); // NOI18N

        txMeterFifo.setText("jTextField5"); // NOI18N

        jLabel31.setText("Rx Id:"); // NOI18N

        rxId.setText("jTextField6"); // NOI18N

        jLabel32.setText("Tx Id:"); // NOI18N

        txId.setText("jTextField7"); // NOI18N

        dttspStartProcess.setText("Start Process");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(62, 62, 62)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(jLabel11)
                            .add(jLabel31)
                            .add(jLabel12)
                            .add(jLabel13)
                            .add(jLabel14)
                            .add(jLabel32)
                            .add(jLabel15)
                            .add(jLabel17)
                            .add(jLabel30))
                        .add(22, 22, 22)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txMeterFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(fifoPath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .add(dttSPExecCommand, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .add(rxId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(rxCommandFifo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .add(rxSpectrumFifo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .add(rxMeterFifo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .add(txId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txCommandFifo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .add(txSpectrumFifo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)))
                    .add(dttspStartProcess))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(dttspStartProcess, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(dttSPExecCommand, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(fifoPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel31)
                    .add(rxId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(rxCommandFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(rxSpectrumFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(rxMeterFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15)
                    .add(txCommandFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(txSpectrumFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel30)
                    .add(txMeterFifo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jackTabbedPanel.addTab("DttSP", jPanel4);

        updateButton.setText("Update"); // NOI18N
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        cancel.setText("Cancel"); // NOI18N
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        quitButton.setText("Quit"); // NOI18N
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(cancel)
                        .add(202, 202, 202)
                        .add(quitButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 362, Short.MAX_VALUE)
                        .add(updateButton))
                    .add(jackTabbedPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 604, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jackTabbedPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 404, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 31, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancel)
                    .add(quitButton)
                    .add(updateButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        quit=true;
        this.setVisible(false);
    }//GEN-LAST:event_quitButtonActionPerformed
   
    public boolean isUpdated() {
        return updated;
    }
    
    public boolean isQuit() {
        return quit;
    }
    
    public void initValues() {
        updated=false;
        init=true;
        initAudioValues();
        initDisplayValues();
        initJackValues();
        initJackConnectValues();
        initDttSPValues();
        initHardwareValues();
        init=false;
    }
    
    private void initAudioValues() {
        // audio
        sampleRate.setSelectedItem(Integer.toString(state.getSampleRate()));
        soundCard.setSelectedItem(state.getSoundcard().getSoundcard().toString());
        bufferSize.setSelectedItem(Integer.toString(state.getBufferSize()));
    }
    
    private void initDisplayValues() {
        // display
        waterfallLowThreshold.setSelectedItem(Integer.toString((int)state.getWaterfallLowThreshold()));
        waterfallHighThreshold.setSelectedItem(Integer.toString((int)state.getWaterfallHighThreshold()));
        spectrumLow.setSelectedItem(Integer.toString(state.getSpectrumLow()));
        spectrumHigh.setSelectedItem(Integer.toString(state.getSpectrumHigh()));
        SpinnerNumberModel spectrumModel=(SpinnerNumberModel)spectrumFrequency.getModel();
        spectrumModel.setMinimum(new Integer(0));
        spectrumModel.setMaximum(new Integer(50));
        spectrumFrequency.setValue(new Integer(state.getSpectrumFrequency()));
        SpinnerNumberModel meterModel=(SpinnerNumberModel)meterFrequency.getModel();
        meterModel.setMinimum(new Integer(0));
        meterModel.setMaximum(new Integer(50));
        meterFrequency.setValue(new Integer(state.getMeterFrequency()));
    }
    
    private void initJackValues() {
        // jack
        jackStartProcess.setSelected(state.isJackStartProcess());
        jackExecCommand.setText(state.getJackCommand());
        jackDriver.setText(state.getJackDriver());
        jackDevice.setText(state.getJackDevice());
        String[] jackOptions=state.getJackOptions();
        DefaultListModel model=(DefaultListModel)this.jackOptions.getModel();
        model.removeAllElements();
        for(int i=0;i<jackOptions.length;i++) {
            model.addElement(jackOptions[i]);
        }
        jackRealtime.setSelected(state.getJackRealtime());
    }
    
    private void initJackConnectValues() {
        // jack_connect
        jackConnectStartProcess.setSelected(state.isJackConnectStartProcess());
        jackConnectExecCommand.setText(state.getJackConnectCommand());
        
        rxIqInputLeft.setText(state.getRxInputLeftSource());
        rxIqInputRight.setText(state.getRxInputRightSource());
        rxAudioOutputLeft.setText(state.getRxOutputLeftDestination());
        rxAudioOutputRight.setText(state.getRxOutputRightDestination());
        
        txMicInputLeft.setText(state.getTxInputLeftSource());
        txMicInputRight.setText(state.getTxInputRightSource());
        txIqOutputLeft.setText(state.getTxOutputLeftDestination());
        txIqOutputRight.setText(state.getTxOutputRightDestination());
    }
    
    private void initDttSPValues() {
        dttspStartProcess.setSelected(state.isDttspStartProcess());
        dttSPExecCommand.setText(state.getDttspCommand());
        fifoPath.setText(state.getDttspFifoPath());
        rxId.setText(state.getDttspRxId());
        rxCommandFifo.setText(state.getDttspRxCommandFifo());
        rxSpectrumFifo.setText(state.getDttspRxSpectrumFifo());
        rxMeterFifo.setText(state.getDttspRxMeterFifo());
        txId.setText(state.getDttspTxId());
        txCommandFifo.setText(state.getDttspTxCommandFifo());
        txSpectrumFifo.setText(state.getDttspTxSpectrumFifo());
        txMeterFifo.setText(state.getDttspTxMeterFifo()); 
    }
    
    private void initHardwareValues() {
        sdr1000StartProcess.setSelected(state.isSdr1000StartProcess());
        radio.setSelectedItem(state.getRadio().toString());
        softrockCenterFrequency.setText(Double.toString(state.getSoftrockCenterFrequency()));
        rxOnly.setSelected(!state.isTransmitEnabled());
        rfe.setSelected(state.isRfe());
        pa.setSelected(state.isPa());
        usb.setSelected(state.isUsb());
        port.setText("0x"+Integer.toHexString(state.getPort()));
        sdr1000HwExec.setText(state.getSdr1000Command());
        sdr1000HwFifoPath.setText(state.getSdr1000FifoPath());
        sdr1000HwCommandFifo.setText(state.getSdr1000HwCommandFifo());
        sdr1000HwStatusFifo.setText(state.getSdr1000HwStatusFifo());
    }
    
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        updateHardware();
        updateDttSP();
        updateJack();
        updateJackConnect();
        updateAudio();
        updateDisplay();
        updated=true;
        this.setVisible(false);
    }//GEN-LAST:event_updateButtonActionPerformed

private void jackStartProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jackStartProcessActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jackStartProcessActionPerformed

private void editJackOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJackOptionActionPerformed
int index=jackOptions.getSelectedIndex();
        if(index>=0) {
            DefaultListModel model=(DefaultListModel)jackOptions.getModel();
            String option=jackOption.getText().trim();
            if(option.length()>0) {
                model.setElementAt(option,index);
            } else {
                option=(String)jackOptions.getSelectedValue();
                if(option!=null) {
                    model.removeElement(option);
                }
            }
        }
}//GEN-LAST:event_editJackOptionActionPerformed

private void deleteJackOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJackOptionActionPerformed
DefaultListModel model=(DefaultListModel)jackOptions.getModel();
        Object option=jackOptions.getSelectedValue();
        if(option!=null) {
            model.removeElement(option);
        }
}//GEN-LAST:event_deleteJackOptionActionPerformed

private void addJackOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJackOptionActionPerformed
DefaultListModel model=(DefaultListModel)jackOptions.getModel();
        String option=jackOption.getText().trim();
        if(option.length()>0) {
            model.addElement(option);
        }
}//GEN-LAST:event_addJackOptionActionPerformed

private void jackOptionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jackOptionsValueChanged
jackOption.setText((String)jackOptions.getSelectedValue());
}//GEN-LAST:event_jackOptionsValueChanged

private void soundCardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_soundCardItemStateChanged
if(!init) {
            // change other values based on card selected
            DefaultListModel model=(DefaultListModel)jackOptions.getModel();
            if(evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
                String os=System.getProperty("os.name");
                if(os.equalsIgnoreCase("mac OS X")) {   
                    switch(Soundcards.valueOf((String)soundCard.getSelectedItem())) {
                        case UNSUPPORTED:
                            //rxIqInputLeft.setText("Aggregate Device:out1");
                            //rxIqInputRight.setText("Aggregate Device:out2");
                            //rxAudioOutputLeft.setText("Aggregate Device:in1");
                            //rxAudioOutputRight.setText("Aggregate Device:in2");
                            
                            rxIqInputLeft.setText("sdr1000:out1");
                            rxIqInputRight.setText("sdr1000:out2");
                            rxAudioOutputLeft.setText("sdr1000:in1");
                            rxAudioOutputRight.setText("sdr1000:in2");
                            
                            txMicInputLeft.setText("");
                            txMicInputRight.setText("");
                            txIqOutputLeft.setText("");
                            txIqOutputRight.setText("");
                            model.removeAllElements();
                            model.addElement("-i2");
                            model.addElement("-o2");
                            jackRealtime.setSelected(true);
                            break;
                        case OZY_JANUS:
                        case AUDIGY_2_ZS:
                        case MP3_PLUS:
                        case EXTIGY:
                        case DELTA_44:
                            rxIqInputLeft.setText("sdr1000:out1");
                            rxIqInputRight.setText("sdr1000:out2");
                            rxAudioOutputLeft.setText("sdr1000:in1");
                            rxAudioOutputRight.setText("sdr1000:in2");
                            //rxIqInputLeft.setText("");
                            //rxIqInputRight.setText("");
                            //rxAudioOutputLeft.setText("");
                            //rxAudioOutputRight.setText("");
                            txMicInputLeft.setText("");
                            txMicInputRight.setText("");
                            txIqOutputLeft.setText("");
                            txIqOutputRight.setText("");
                            model.removeAllElements();
                            jackRealtime.setSelected(true);
                            break;
                        case FIREBOX:
                        case EDIROL_FA_66:
                            rxIqInputLeft.setText("sdr1000:out3");
                            rxIqInputRight.setText("sdr1000:out4");
                            rxAudioOutputLeft.setText("sdr1000:in1");
                            rxAudioOutputRight.setText("sdr1000:in2");
                            txMicInputLeft.setText("sdr1000:out1");
                            txMicInputRight.setText("sdr1000:out2");
                            txIqOutputLeft.setText("sdr1000:in3");
                            txIqOutputRight.setText("sdr1000:in4");
                            model.removeAllElements();
                            model.addElement("-i4");
                            model.addElement("-o4");
                            jackRealtime.setSelected(true);
                            break;
                    }

                } else if(os.equalsIgnoreCase("linux")) {

                    switch(Soundcards.valueOf((String)soundCard.getSelectedItem())) {
                        case UNSUPPORTED:
                            jackDriver.setText("alsa");
                            jackDevice.setText("alsa_pcm");
                            rxIqInputLeft.setText("capture_1");
                            rxIqInputRight.setText("capture_2");
                            rxAudioOutputLeft.setText("playback_1");
                            rxAudioOutputRight.setText("playback_2");
                            txMicInputLeft.setText("");
                            txMicInputRight.setText("");
                            txIqOutputLeft.setText("");
                            txIqOutputRight.setText("");
                            model.removeAllElements();
                            model.addElement("-dhw:0");
                            jackRealtime.setSelected(false);
                            break;
                        case OZY_JANUS:
                            jackDriver.setText("dummy");
                            jackDevice.setText("OzyJanus");
                            rxIqInputLeft.setText("OJ_inputlp");
                            rxIqInputRight.setText("OJ_inputrp");
                            rxAudioOutputLeft.setText("OJ_monlp");
                            rxAudioOutputRight.setText("OJ_monrp");
                            txMicInputLeft.setText("OJ_miclp");
                            txMicInputRight.setText("OJ_micrp");
                            txIqOutputLeft.setText("OJ_outputlp");
                            txIqOutputRight.setText("OJ_outputrp");
                            model.removeAllElements();
                            jackRealtime.setSelected(false);
                            break;
                        case AUDIGY_2_ZS:
                        case MP3_PLUS:
                        case EXTIGY:
                            rxIqInputLeft.setText("");
                            rxIqInputRight.setText("");
                            rxAudioOutputLeft.setText("");
                            rxAudioOutputRight.setText("");
                            txMicInputLeft.setText("");
                            txMicInputRight.setText("");
                            txIqOutputLeft.setText("");
                            txIqOutputRight.setText("");
                            model.removeAllElements();
                            model.addElement("-dhw:1");
                            jackRealtime.setSelected(false);
                            break;
                        case DELTA_44:
                            jackDriver.setText("alsa");
                            jackDevice.setText("alsa_pcm");
                            rxIqInputLeft.setText("capture_1");
                            rxIqInputRight.setText("capture_2");
                            rxAudioOutputLeft.setText("playback_1");
                            rxAudioOutputRight.setText("playback_2");
                            txMicInputLeft.setText("capture_3");
                            txMicInputRight.setText("capture_4");
                            txIqOutputLeft.setText("playback_3");
                            txIqOutputRight.setText("playback_4");
                            model.removeAllElements();
                            model.addElement("-dhw:1");
                            jackRealtime.setSelected(false);
                            break;
                        case EDIROL_FA_66:
                        case FIREBOX:
                            jackDriver.setText("freebob");
                            jackDevice.setText("freebob_pcm");
                            rxIqInputLeft.setText("dev1c_LineIn 3+4 left");
                            rxIqInputRight.setText("dev1c_LineIn 3+4 right");
                            rxAudioOutputLeft.setText("dev1p_LineOut 1+2 left");
                            rxAudioOutputRight.setText("dev1p_LineOut 1+2 right");
                            txMicInputLeft.setText("dev1c_MicIn1 left");
                            txMicInputRight.setText("dev1c_MicIn1 right");
                            txIqOutputLeft.setText("dev1p_LineOut 3+4 left");
                            txIqOutputRight.setText("dev1p_LineOut 3+4 right");
                            model.removeAllElements();
                            jackRealtime.setSelected(false);
                            break;
                    }
                }
            }
        }
}//GEN-LAST:event_soundCardItemStateChanged

private void sdr1000StartProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sdr1000StartProcessActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_sdr1000StartProcessActionPerformed
    
    private void updateHardware() {
        state.setSdr1000StartProcess(sdr1000StartProcess.isSelected());
        state.setRadio(Radios.valueOf((String)radio.getSelectedItem()));
        state.setSoftrockCenterFrequency(Double.parseDouble(softrockCenterFrequency.getText()));
        state.setTransmitEnabled(!rxOnly.isSelected());
        state.setPa(pa.isSelected());
        state.setRfe(rfe.isSelected());
        state.setUsb(usb.isSelected());
        try {
            state.setPort(Integer.parseInt(port.getText(),16));
        } catch (Exception e) {
            System.err.println("Invalid hardware (parallel) port hex value!"); 
        }
        state.setSdr1000Command(sdr1000HwExec.getText());
        state.setSdr1000FifoPath(sdr1000HwFifoPath.getText());
        state.setSdr1000HwCommandFifo(sdr1000HwCommandFifo.getText());
        state.setSdr1000HwStatusFifo(sdr1000HwStatusFifo.getText());
    }
    
    private void updateDttSP() {
        state.setDttspStartProcess(dttspStartProcess.isSelected());
        state.setDttspCommand(dttSPExecCommand.getText());
        state.setDttspFifoPath(fifoPath.getText());
        state.setDttspRxId(rxId.getText());
        state.setDttspRxCommandFifo(rxCommandFifo.getText());
        state.setDttspRxSpectrumFifo(rxSpectrumFifo.getText());
        state.setDttspRxMeterFifo(rxMeterFifo.getText());
        state.setDttspTxId(txId.getText());
        state.setDttspTxCommandFifo(txCommandFifo.getText());
        state.setDttspTxSpectrumFifo(txSpectrumFifo.getText());
        state.setDttspTxMeterFifo(txMeterFifo.getText());
    }
    
    private void updateJack() {
        state.setJackStartProcess(jackStartProcess.isSelected());
        state.setJackCommand(jackExecCommand.getText());
        state.setJackDriver(jackDriver.getText());
        state.setJackDevice(jackDevice.getText());
        DefaultListModel model=(DefaultListModel)this.jackOptions.getModel();
        String[] options=new String[model.getSize()];
        for(int i=0;i<options.length;i++) {
            options[i]=(String)model.getElementAt(i);
        }
        state.setJackOptions(options);
        state.setJackRealtime(jackRealtime.isSelected());
        
    }
    
    private void updateJackConnect() {
        state.setJackConnectStartProcess(jackConnectStartProcess.isSelected());
        state.setJackConnectCommand(jackConnectExecCommand.getText());
        
        state.setRxInputLeftSource(rxIqInputLeft.getText());
        state.setRxInputRightSource(rxIqInputRight.getText());
        state.setRxOutputLeftDestination(rxAudioOutputLeft.getText());
        state.setRxOutputRightDestination(rxAudioOutputRight.getText());
        
        state.setTxInputLeftSource(txMicInputLeft.getText());
        state.setTxInputRightSource(txMicInputRight.getText());
        state.setTxOutputLeftDestination(txIqOutputLeft.getText());
        state.setTxOutputRightDestination(txIqOutputRight.getText());
    }
    
    private void updateAudio() {
        state.setSampleRate(Integer.parseInt((String)sampleRate.getSelectedItem()));
        state.setBufferSize(Integer.parseInt((String)bufferSize.getSelectedItem()));
        state.getSoundcard().setSoundcard(Soundcards.valueOf((String)soundCard.getSelectedItem()));
    }
    
    private void updateDisplay() {
        state.setWaterfallLowThreshhold(Float.parseFloat((String)waterfallLowThreshold.getSelectedItem()));
        state.setWaterfallHighThreshhold(Float.parseFloat((String)waterfallHighThreshold.getSelectedItem()));
        state.setSpectrumLow(Integer.parseInt((String)spectrumLow.getSelectedItem()));
        state.setSpectrumHigh(Integer.parseInt((String)spectrumHigh.getSelectedItem()));
        
        SpinnerNumberModel spectrumModel=(SpinnerNumberModel)spectrumFrequency.getModel();
        Integer value=(Integer)spectrumModel.getValue();
        state.setSpectrumFrequency(value.intValue());
        
        SpinnerNumberModel meterModel=(SpinnerNumberModel)meterFrequency.getModel();
        value=(Integer)meterModel.getValue();
        state.setMeterFrequency(value.intValue());
        
    }
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJackOption;
    private javax.swing.JCheckBox antennaTuner;
    private javax.swing.JComboBox bufferSize;
    private javax.swing.JButton cancel;
    private javax.swing.JButton deleteJackOption;
    private javax.swing.JTextField dttSPExecCommand;
    private javax.swing.JCheckBox dttspStartProcess;
    private javax.swing.JButton editJackOption;
    private javax.swing.JTextField fifoPath;
    private javax.swing.JPanel hardwarePanel;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jackConnectExecCommand;
    private javax.swing.JCheckBox jackConnectStartProcess;
    private javax.swing.JTextField jackDevice;
    private javax.swing.JTextField jackDriver;
    private javax.swing.JTextField jackExecCommand;
    private javax.swing.JTextField jackOption;
    private javax.swing.JList jackOptions;
    private javax.swing.JPanel jackPanel;
    private javax.swing.JCheckBox jackRealtime;
    private javax.swing.JCheckBox jackStartProcess;
    private javax.swing.JTabbedPane jackTabbedPanel;
    private javax.swing.JSpinner meterFrequency;
    private javax.swing.JCheckBox pa;
    private javax.swing.JTextField port;
    private javax.swing.JButton quitButton;
    private javax.swing.JComboBox radio;
    private javax.swing.JCheckBox rfe;
    private javax.swing.JTextField rxAudioOutputLeft;
    private javax.swing.JTextField rxAudioOutputRight;
    private javax.swing.JTextField rxCommandFifo;
    private javax.swing.JTextField rxId;
    private javax.swing.JTextField rxIqInputLeft;
    private javax.swing.JTextField rxIqInputRight;
    private javax.swing.JTextField rxMeterFifo;
    private javax.swing.JCheckBox rxOnly;
    private javax.swing.JTextField rxSpectrumFifo;
    private javax.swing.JComboBox sampleRate;
    private javax.swing.JTextField sdr1000HwCommandFifo;
    private javax.swing.JTextField sdr1000HwExec;
    private javax.swing.JTextField sdr1000HwFifoPath;
    private javax.swing.JTextField sdr1000HwStatusFifo;
    private javax.swing.JCheckBox sdr1000StartProcess;
    private javax.swing.JTextField softrockCenterFrequency;
    private javax.swing.JComboBox soundCard;
    private javax.swing.JSpinner spectrumFrequency;
    private javax.swing.JComboBox spectrumHigh;
    private javax.swing.JComboBox spectrumLow;
    private javax.swing.JTextField txCommandFifo;
    private javax.swing.JTextField txId;
    private javax.swing.JTextField txIqOutputLeft;
    private javax.swing.JTextField txIqOutputRight;
    private javax.swing.JTextField txMeterFifo;
    private javax.swing.JTextField txMicInputLeft;
    private javax.swing.JTextField txMicInputRight;
    private javax.swing.JTextField txSpectrumFifo;
    private javax.swing.JButton updateButton;
    private javax.swing.JCheckBox usb;
    private javax.swing.JCheckBox usb1;
    private javax.swing.JComboBox waterfallHighThreshold;
    private javax.swing.JComboBox waterfallLowThreshold;
    private javax.swing.JCheckBox xvtr;
    // End of variables declaration//GEN-END:variables
    
    private State state;
    private boolean init=false;
    private boolean updated=false;
    private boolean quit=false;
    
}
