/*
 * Display.java
 *
 * Created on September 8, 2007, 5:27 PM
 *
 * Copyright (C) 2006, 2007 by John Melton, G0ORX/N6LYT
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * The author can be reached by email at
 *
 * john.melton@sun.com
 *
 */

package radio;

import java.awt.Color;

/**
 *
 *  Display
 */
public class Display extends javax.swing.JPanel implements DisplayInterface {
    
    /** Creates new form Display */
    public Display() {
        initComponents();
    }
    
    public void addListener(DisplayListener displayListener) {
        this.displayListener=displayListener;
        graph.addListener(displayListener);
    }

    public void select(Displays display) {
        javax.swing.JButton button=getButton(display);
        if(button!=null) {
            button.setForeground(Color.YELLOW);
        }
        currentDisplay=display;
    }
    
    public void unselect(Displays display) {
        javax.swing.JButton button=getButton(display);
        if(button!=null) {
            button.setForeground(Color.BLACK);
        }
    }
    
    public void setRadio(Radios radio) {
        graph.setRadio(radio);
    }
    
    public void setSoftrockCenterFrequency(double f) {
        graph.setSoftrockCenterFrequency(f);
    }
    
    public void setSampleRate(int sampleRate) {
        graph.setSampleRate(sampleRate);
    }
    
    public void setDisplayCalibrationOffset(double displayCalibrationOffset) {
        graph.setDisplayCalibrationOffset(displayCalibrationOffset);
    }
    
    public void setPreampOffset(double preampOffset) {
        graph.setPreampOffset(preampOffset);
    }
    
    public void setFilterSizeOffset(int offset) {
        graph.setFilterSizeOffset(offset);
    }
    
    public void updateGraph(float[] samples) {
        graph.updateGraph(samples,currentDisplay);
    }
    
    public void setFilter(int low,int high) {
        graph.setFilter(low,high);
    }
    
    public void setFrequency(double frequency) {
        graph.setFrequency(frequency);
    }
    
    public void setOffset(double offset) {
        graph.setOffset(offset);
    }
    
    public void setSpectrumLow(int spectrumLow) {
        graph.setSpectrumLow(spectrumLow);
    }
    
    public void setSpectrumHigh(int spectrumHigh) {
        graph.setSpectrumHigh(spectrumHigh);
    }
    
    public void setWaterfallLowThreshold(float low) {
        graph.setWaterfallLowThreshold(low);
    }
    
    public void setWaterfallHighThreshold(float high) {
        graph.setWaterfallHighThreshold(high);
    }
    
    private javax.swing.JButton getButton(Displays display) {
        javax.swing.JButton button=null;
        switch(display) {
            case NONE:
                button=noneButton;
                break;
            case SPECTRUM:
                button=spectrumButton;
                break;
            case PANADAPTER:
                button=panadapterButton;
                break;
            case SCOPE:
                button=scopeButton;
                break;
            case PHASE:
                button=phaseButton;
                break;
            case PHASE2:
                button=phase2Button;
                break;
            case WATERFALL:
                button=waterfallButton;
                break;
            case PANFALL:
                button=panwaterfallButton;
                break;
        }
        return button;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        noneButton = new javax.swing.JButton();
        spectrumButton = new javax.swing.JButton();
        panadapterButton = new javax.swing.JButton();
        scopeButton = new javax.swing.JButton();
        phaseButton = new javax.swing.JButton();
        phase2Button = new javax.swing.JButton();
        waterfallButton = new javax.swing.JButton();
        graph = new radio.Graph();
        panwaterfallButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 153));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        noneButton.setBackground(new java.awt.Color(153, 153, 153));
        noneButton.setText("None");
        noneButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        noneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneButtonActionPerformed(evt);
            }
        });
        add(noneButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 100, -1));

        spectrumButton.setBackground(new java.awt.Color(153, 153, 153));
        spectrumButton.setText("Spectrum");
        spectrumButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        spectrumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectrumButtonActionPerformed(evt);
            }
        });
        add(spectrumButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 100, -1));

        panadapterButton.setBackground(new java.awt.Color(153, 153, 153));
        panadapterButton.setText("Panadapter");
        panadapterButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panadapterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panadapterButtonActionPerformed(evt);
            }
        });
        add(panadapterButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 100, -1));

        scopeButton.setBackground(new java.awt.Color(153, 153, 153));
        scopeButton.setText("Scope");
        scopeButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        scopeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scopeButtonActionPerformed(evt);
            }
        });
        add(scopeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 100, -1));

        phaseButton.setBackground(new java.awt.Color(153, 153, 153));
        phaseButton.setText("Phase");
        phaseButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        phaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phaseButtonActionPerformed(evt);
            }
        });
        add(phaseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 100, -1));

        phase2Button.setBackground(new java.awt.Color(153, 153, 153));
        phase2Button.setText("Phase2");
        phase2Button.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        phase2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phase2ButtonActionPerformed(evt);
            }
        });
        add(phase2Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 100, -1));

        waterfallButton.setBackground(new java.awt.Color(153, 153, 153));
        waterfallButton.setText("Waterfall");
        waterfallButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        waterfallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waterfallButtonActionPerformed(evt);
            }
        });
        add(waterfallButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 100, -1));

        org.jdesktop.layout.GroupLayout graphLayout = new org.jdesktop.layout.GroupLayout(graph);
        graph.setLayout(graphLayout);
        graphLayout.setHorizontalGroup(
            graphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 880, Short.MAX_VALUE)
        );
        graphLayout.setVerticalGroup(
            graphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        add(graph, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, -1, -1));

        panwaterfallButton.setBackground(new java.awt.Color(153, 153, 153));
        panwaterfallButton.setText("Pan/Waterfall");
        panwaterfallButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panwaterfallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panwaterfallButtonActionPerformed(evt);
            }
        });
        add(panwaterfallButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 100, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void panwaterfallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panwaterfallButtonActionPerformed
        displayListener.displaySelected(Displays.PANFALL);
    }//GEN-LAST:event_panwaterfallButtonActionPerformed

    private void waterfallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waterfallButtonActionPerformed
        displayListener.displaySelected(Displays.WATERFALL);
    }//GEN-LAST:event_waterfallButtonActionPerformed

    private void phase2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phase2ButtonActionPerformed
        displayListener.displaySelected(Displays.PHASE2);
    }//GEN-LAST:event_phase2ButtonActionPerformed

    private void phaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phaseButtonActionPerformed
        displayListener.displaySelected(Displays.PHASE);
    }//GEN-LAST:event_phaseButtonActionPerformed

    private void scopeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scopeButtonActionPerformed
        displayListener.displaySelected(Displays.SCOPE);
    }//GEN-LAST:event_scopeButtonActionPerformed

    private void panadapterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panadapterButtonActionPerformed
        displayListener.displaySelected(Displays.PANADAPTER);
    }//GEN-LAST:event_panadapterButtonActionPerformed

    private void spectrumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectrumButtonActionPerformed
        displayListener.displaySelected(Displays.SPECTRUM);
    }//GEN-LAST:event_spectrumButtonActionPerformed

    private void noneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneButtonActionPerformed
        displayListener.displaySelected(Displays.NONE);
    }//GEN-LAST:event_noneButtonActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // popup a config dialog for the display
        if(evt.getButton()==evt.BUTTON3) {
            displayListener.configureDisplay();
        }
    }//GEN-LAST:event_formMouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private radio.Graph graph;
    private javax.swing.JButton noneButton;
    private javax.swing.JButton panadapterButton;
    private javax.swing.JButton panwaterfallButton;
    private javax.swing.JButton phase2Button;
    private javax.swing.JButton phaseButton;
    private javax.swing.JButton scopeButton;
    private javax.swing.JButton spectrumButton;
    private javax.swing.JButton waterfallButton;
    // End of variables declaration//GEN-END:variables
    
    private Displays currentDisplay=Displays.NONE;
    
    private DisplayListener displayListener;
    
    private SpectrumThread spectrum;
    private SpectrumUpdateThread spectrumUpdate;
    
}
